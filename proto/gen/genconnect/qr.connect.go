// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: qr.proto

package genconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	gen "github.com/carolinaborim/go-qr-code-generator/proto/gen"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// QrGeneratorName is the fully-qualified name of the QrGenerator service.
	QrGeneratorName = "qr.QrGenerator"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// QrGeneratorGenerateQrProcedure is the fully-qualified name of the QrGenerator's GenerateQr RPC.
	QrGeneratorGenerateQrProcedure = "/qr.QrGenerator/GenerateQr"
)

// QrGeneratorClient is a client for the qr.QrGenerator service.
type QrGeneratorClient interface {
	GenerateQr(context.Context, *connect.Request[gen.GenerateQrRequest]) (*connect.Response[gen.GenerateQrResponse], error)
}

// NewQrGeneratorClient constructs a client for the qr.QrGenerator service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewQrGeneratorClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) QrGeneratorClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &qrGeneratorClient{
		generateQr: connect.NewClient[gen.GenerateQrRequest, gen.GenerateQrResponse](
			httpClient,
			baseURL+QrGeneratorGenerateQrProcedure,
			opts...,
		),
	}
}

// qrGeneratorClient implements QrGeneratorClient.
type qrGeneratorClient struct {
	generateQr *connect.Client[gen.GenerateQrRequest, gen.GenerateQrResponse]
}

// GenerateQr calls qr.QrGenerator.GenerateQr.
func (c *qrGeneratorClient) GenerateQr(ctx context.Context, req *connect.Request[gen.GenerateQrRequest]) (*connect.Response[gen.GenerateQrResponse], error) {
	return c.generateQr.CallUnary(ctx, req)
}

// QrGeneratorHandler is an implementation of the qr.QrGenerator service.
type QrGeneratorHandler interface {
	GenerateQr(context.Context, *connect.Request[gen.GenerateQrRequest]) (*connect.Response[gen.GenerateQrResponse], error)
}

// NewQrGeneratorHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewQrGeneratorHandler(svc QrGeneratorHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	qrGeneratorGenerateQrHandler := connect.NewUnaryHandler(
		QrGeneratorGenerateQrProcedure,
		svc.GenerateQr,
		opts...,
	)
	return "/qr.QrGenerator/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case QrGeneratorGenerateQrProcedure:
			qrGeneratorGenerateQrHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedQrGeneratorHandler returns CodeUnimplemented from all methods.
type UnimplementedQrGeneratorHandler struct{}

func (UnimplementedQrGeneratorHandler) GenerateQr(context.Context, *connect.Request[gen.GenerateQrRequest]) (*connect.Response[gen.GenerateQrResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qr.QrGenerator.GenerateQr is not implemented"))
}
